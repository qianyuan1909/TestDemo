示例 1:

输入: s = "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

输入: s = "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

输入: s = "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。
示例 4:

输入: s = ""
输出: 0
子串的end一直递增，只需要处理start就行，如果当前字符end在子串[start,end)（包括start不包括end）中，start就应该是子串中与end相等的字符的位置+1

代码

class Solution {
   public static int lengthOfLongestSubstring(String s) {
        int start=0,end=1;
        int maxlen=0;
        if(s.length()<=1) maxlen=s.length();
        for (; end < s.length(); end++) {
            for (int j = start; j <end; j++) {//end是否在子串当中
                if(s.charAt(end)==s.charAt(j)) {
                    start = j + 1;//在子串中，更新start
                }
            }
            maxlen=Math.max(maxlen,end-start+1);
        }
        return maxlen;
    }
}
